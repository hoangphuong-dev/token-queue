# -*- coding: utf-8 -*-
from odoo import models, fields, api, _
from odoo.exceptions import UserError
from odoo.tools.safe_eval import safe_eval
import hashlib
import logging

_logger = logging.getLogger(__name__)

NEXT_SERVICE = "next_service"
DONE_SERVICE = "service_completed"
TEXT_INSTRUCT = "Vui l√≤ng h∆∞·ªõng d·∫´n b·ªánh nh√¢n ƒë·∫øn %s cho d·ªãch v·ª• %s"

HR_DEPARTMENT = 'hr.department'
PRODUCT_PRODUCT = 'product.product'
HIS_PATIENT = 'his.patient'
HIS_HEALTH_CHECK_PACKAGE = 'his.health.check.package'

HIS_QUEUE_TOKEN = "his.queue.token"
HIS_HEALTH_CHECK_GROUP = "his.health.check.group"
HIS_QUEUE_SERVICE_ROUTE = "his.queue.service.route"

IR_ACTIONS_CLIENT = "ir.actions.client"
HIS_QUEUE_SERVICE_GROUP_ROUTE = "his.queue.service.group.route"


class QueueToken(models.Model):
    _name = HIS_QUEUE_TOKEN
    _description = 'Patient Queue Token'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'position, create_date asc'

    name = fields.Char(string='Token Code', readonly=True, default=lambda self: _('New'))
    patient_id = fields.Many2one(HIS_PATIENT, string='Patient', required=True)
    service_id = fields.Many2one(PRODUCT_PRODUCT, string='Service', required=True, ondelete='cascade')
    room_id = fields.Many2one(HR_DEPARTMENT, string='Assigned Room', tracking=True, ondelete='cascade')
    position = fields.Integer(string='Queue Position', tracking=True, default=0, index=True)
    priority = fields.Integer(string='Priority Level', default=0, tracking=True)
    estimated_wait_time = fields.Float(string='Estimated Wait Time (minutes)', compute='_compute_wait_time')
    state = fields.Selection([
        ('draft', 'Scheduled'),  # Tr·∫°ng th√°i m·ªõi n√†y cho token ƒë√£ t·∫°o nh∆∞ng ch∆∞a ƒë∆∞a v√†o h√†ng ƒë·ª£i
        ('waiting', 'Waiting'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled')
    ], string='Status', default='draft', tracking=True)
    patient_pid = fields.Char(
        string='PID',
        related='patient_id.code',
        readonly=True,
        store=True
    )
    start_time = fields.Datetime(string='Start Time')
    end_time = fields.Datetime(string='End Time')
    actual_duration = fields.Float(string='Actual Duration (minutes)', compute='_compute_duration', store=True)
    notes = fields.Text(string='Notes')
    next_service_id = fields.Many2one(PRODUCT_PRODUCT, string='Next Service', compute='_compute_next_service',
                                      ondelete='cascade')
    package_id = fields.Many2one(HIS_HEALTH_CHECK_PACKAGE, string='Service Package', ondelete='cascade')
    color = fields.Integer(string='Color', compute='_compute_color')
    service_group_id = fields.Many2one(HIS_HEALTH_CHECK_GROUP, string='Service Group', ondelete='cascade')
    is_parallel = fields.Boolean(string='Is Parallel Service', compute='_compute_is_parallel', store=True)
    next_recommended_service_id = fields.Many2one(
        PRODUCT_PRODUCT,
        string='Next Recommended Service',
        compute='_compute_next_recommended_service',
        ondelete='cascade'
    )

    parallel_token_ids = fields.Many2many(HIS_QUEUE_TOKEN, 'queue_token_parallel_rel', 'token_id', 'parallel_token_id',
                                          string='Parallel Tokens',
                                          help="Other tokens in the same parallel service group")
    origin_token_id = fields.Many2one(HIS_QUEUE_TOKEN, string='Origin Token',
                                      help="Original token that created this token",
                                      ondelete='cascade')

    @api.depends('service_group_id')
    def _compute_is_parallel(self):
        for token in self:
            if token.service_group_id and len(token.service_group_id.service_ids) > 1:
                token.is_parallel = True
            else:
                token.is_parallel = False

    def write(self, vals):
        """Override write ƒë·ªÉ ghi log khi thay ƒë·ªïi position"""
        # L∆∞u position c≈© tr∆∞·ªõc khi update
        if 'position' not in vals:
            return super().write(vals)

        # Extract position change logic
        old_positions = self._capture_old_positions()
        result = super().write(vals)
        self._handle_position_changes(old_positions, vals)

        return result

    def _capture_old_positions(self):
        """Capture old positions before update"""
        old_positions = {}
        for record in self:
            old_positions[record.id] = record.position
            # Validation
            if record.state != 'waiting':
                raise UserError(_('Ch·ªâ c√≥ th·ªÉ thay ƒë·ªïi v·ªã tr√≠ c·ªßa token ƒëang ch·ªù'))
        return old_positions

    def _handle_position_changes(self, old_positions, vals):
        """Handle position changes after write"""
        if not old_positions or self.env.context.get('skip_position_log', False):
            return

        for record in self:
            old_pos = old_positions.get(record.id)
            new_pos = record.position

            if old_pos and old_pos != new_pos:
                self._create_position_change_log(record, old_pos, new_pos)

    def _create_position_change_log(self, token, old_pos, new_pos):
        """T·∫°o log khi thay ƒë·ªïi v·ªã tr√≠"""
        try:
            log_vals = {
                'patient_id': token.patient_id.id,
                'coordination_type': 'position_change',
                'from_service_id': token.service_id.id,
                'to_service_id': token.service_id.id,
                'from_room_id': token.room_id.id,
                'to_room_id': token.room_id.id,
                'old_position': old_pos,
                'new_position': new_pos,
                'old_token_id': token.id,
                'new_token_id': token.id,
                'coordination_reason': f'ƒêi·ªÅu ch·ªânh v·ªã tr√≠ t·ª´ {old_pos} ƒë·∫øn {new_pos}'
            }

            self.env['his.queue.coordination.log'].create(log_vals)
            _logger.info("ƒê√£ t·∫°o log ƒëi·ªÅu ph·ªëi cho token %s", token.name)
        except Exception as e:
            _logger.error("L·ªói khi t·∫°o log ƒëi·ªÅu ph·ªëi: %s", str(e))

    @api.model_create_multi
    def create(self, vals_list):
        """
        Ghi ƒë√® ph∆∞∆°ng th·ª©c create ƒë·ªÉ t·∫°o m√£ token t·ª± ƒë·ªông v√† th·ª±c hi·ªán quy tr√¨nh ph√¢n ph·ªëi
        Quy tr√¨nh:
        1. T·∫°o m√£ token
        2. T√≠nh to√°n m·ª©c ∆∞u ti√™n d·ª±a tr√™n th√¥ng tin b·ªánh nh√¢n
        3. Ch·ªâ ƒë·ªãnh ph√≤ng b·∫±ng thu·∫≠t to√°n hash
        4. Th√™m v√†o h√†ng ƒë·ª£i v√† s·∫Øp x·∫øp theo ∆∞u ti√™n
        5. Override create method v·ªõi logic skip auto assignment cho coordination
        """
        # Generate sequence cho t·∫•t c·∫£ tokens
        for vals in vals_list:
            if vals.get('name', _('New')) == _('New'):
                vals['name'] = self.env['ir.sequence'].next_by_code(HIS_QUEUE_TOKEN) or _('New')

        # T·∫°o tokens nh∆∞ b√¨nh th∆∞·ªùng
        tokens = super(QueueToken, self).create(vals_list)

        # Post-processing for each token
        for token in tokens:
            # üîë KEY: Ki·ªÉm tra context flag
            if self.env.context.get('skip_auto_assignment'):
                # Token t·ª´ coordination ‚Üí Skip auto flow
                continue

            # Token b√¨nh th∆∞·ªùng ‚Üí Ch·∫°y full auto flow
            token._assign_room_by_hash()
            token._add_to_queue_and_sort()
            token._send_notifications('new_token')

        return tokens

    def _assign_room_by_hash(self):
        """
        Ch·ªâ ƒë·ªãnh ph√≤ng cho b·ªánh nh√¢n s·ª≠ d·ª•ng thu·∫≠t to√°n hash v√† c√¢n b·∫±ng t·∫£i

        Thu·∫≠t to√°n:
        1. N·∫øu b·ªánh nh√¢n ∆∞u ti√™n cao -> ch·ªâ ƒë·ªãnh v√†o ph√≤ng √≠t t·∫£i nh·∫•t
        2. B·ªánh nh√¢n th√¥ng th∆∞·ªùng -> s·ª≠ d·ª•ng h√†m hash ƒë·ªÉ ph√¢n b·ªï ƒë·ªÅu
        3. N·∫øu ph√≤ng ƒë√£ qu√° t·∫£i (>150% so v·ªõi ph√≤ng √≠t nh·∫•t) -> chuy·ªÉn sang ph√≤ng √≠t t·∫£i
        """
        for token in self:
            # T√¨m c√°c ph√≤ng c√≥ th·ªÉ th·ª±c hi·ªán d·ªãch v·ª• n√†y
            available_rooms = self.env[HR_DEPARTMENT].search([
                ('service_id', '=', token.service_id.id),
                ('state', '=', 'open')
            ])

            if not available_rooms:
                raise UserError(_("no_available_room_for_service"))

            # V·ªõi b·ªánh nh√¢n ∆∞u ti√™n cao, ch·ªâ ƒë·ªãnh ph√≤ng √≠t t·∫£i nh·∫•t
            if token.priority > 0:
                least_loaded_room = self._get_least_loaded_room(available_rooms)
                token.room_id = least_loaded_room.id
            else:
                # V·ªõi b·ªánh nh√¢n th√¥ng th∆∞·ªùng, s·ª≠ d·ª•ng hash ƒë·ªÉ ph√¢n b·ªï ƒë·ªÅu
                hash_input = f"{token.patient_id.id}-{token.service_id.id}"
                hash_value = int(hashlib.sha256(hash_input.encode()).hexdigest(), 16)
                room_index = hash_value % len(available_rooms)
                selected_room = available_rooms[room_index]

                # Ki·ªÉm tra n·∫øu ph√≤ng ƒë∆∞·ª£c ch·ªçn ƒë√£ qu√° t·∫£i
                least_loaded_room = self._get_least_loaded_room(available_rooms)
                if self._get_room_load(selected_room) > self._get_room_load(least_loaded_room) * 1.5:
                    # N·∫øu qu√° t·∫£i >150% so v·ªõi ph√≤ng √≠t nh·∫•t, chuy·ªÉn sang ph√≤ng √≠t t·∫£i
                    token.room_id = least_loaded_room.id
                else:
                    token.room_id = selected_room.id

    def _get_least_loaded_room(self, rooms):
        """
        T√¨m ph√≤ng c√≥ t·∫£i th·∫•p nh·∫•t trong danh s√°ch ph√≤ng

        Tham s·ªë:
            rooms: Recordset c√°c ph√≤ng c·∫ßn ki·ªÉm tra

        Tr·∫£ v·ªÅ:
            room: Ph√≤ng c√≥ t·∫£i th·∫•p nh·∫•t
        """
        if not rooms:
            return False

        min_load = float('inf')
        least_loaded_room = rooms[0]

        for room in rooms:
            room_load = self._get_room_load(room)
            if room_load < min_load:
                min_load = room_load
                least_loaded_room = room

        return least_loaded_room

    def _get_room_load(self, room):
        """
        T√≠nh to√°n t·∫£i c·ªßa ph√≤ng (s·ªë ng∆∞·ªùi ƒë·ª£i / c√¥ng su·∫•t)

        Tham s·ªë:
            room: Ph√≤ng c·∫ßn t√≠nh t·∫£i

        Tr·∫£ v·ªÅ:
            float: T·ª∑ l·ªá t·∫£i (s·ªë ng∆∞·ªùi ƒë·ª£i / c√¥ng su·∫•t)
        """
        waiting_count = self.search_count([
            ('room_id', '=', room.id),
            ('state', '=', 'waiting')
        ])
        return waiting_count / room.capacity if room.capacity > 0 else float('inf')

    def _add_to_queue_and_sort(self):
        """
        Th√™m token v√†o h√†ng ƒë·ª£i v√† s·∫Øp x·∫øp d·ª±a tr√™n ∆∞u ti√™n v√† th·ªùi gian
        Quy t·∫Øc s·∫Øp x·∫øp:
        1. ∆Øu ti√™n cao ƒë∆∞·ª£c x·∫øp tr∆∞·ªõc
        2. V·ªõi c√πng m·ª©c ∆∞u ti√™n, ai ƒë·∫øn tr∆∞·ªõc ƒë∆∞·ª£c ph·ª•c v·ª• tr∆∞·ªõc (FIFO)
        """
        for token in self:
            if token.state == 'draft' and not token.is_parallel:
                # Ch·ªâ chuy·ªÉn sang waiting n·∫øu kh√¥ng ph·∫£i token song song
                token.state = 'waiting'

            # L·∫•y t·∫•t c·∫£ token ƒëang ƒë·ª£i trong c√πng ph√≤ng
            waiting_tokens = self.search([
                ('room_id', '=', token.room_id.id),
                ('state', '=', 'waiting')
            ])

            # S·∫Øp x·∫øp theo m·ª©c ∆∞u ti√™n (gi·∫£m d·∫ßn) v√† th·ªùi gian t·∫°o (tƒÉng d·∫ßn)
            sorted_tokens = waiting_tokens.sorted(key=lambda r: (-r.priority, r.create_date))

            # C·∫≠p nh·∫≠t v·ªã tr√≠ cho m·ªói token
            for index, t in enumerate(sorted_tokens):
                t.position = index + 1

            # Th√¥ng b√°o thay ƒë·ªïi h√†ng ƒë·ª£i ƒë·∫øn m√†n h√¨nh hi·ªÉn th·ªã ph√≤ng
            self._notify_queue_change(token.room_id)

    @api.depends('start_time', 'end_time')
    def _compute_duration(self):
        """
        T√≠nh to√°n th·ªùi gian ph·ª•c v·ª• th·ª±c t·∫ø
        """
        for token in self:
            if token.start_time and token.end_time:
                duration = (token.end_time - token.start_time).total_seconds() / 60
                token.actual_duration = duration
            else:
                token.actual_duration = 0

    def _compute_next_service(self):
        """X√°c ƒë·ªãnh d·ªãch v·ª• ti·∫øp theo d·ª±a tr√™n d·ªãch v·ª• hi·ªán t·∫°i v√† g√≥i d·ªãch v·ª•"""
        for token in self:
            next_service = self._get_next_service(token.service_id, token.package_id)
            token.next_service_id = next_service.id if next_service else False

    def _get_next_service(self, current_service, package):
        """L·∫•y d·ªãch v·ª• ti·∫øp theo d·ª±a tr√™n d·ªãch v·ª• hi·ªán t·∫°i v√† g√≥i d·ªãch v·ª•"""
        if not current_service or not package:
            _logger.info("Thi·∫øu th√¥ng tin: current_service=%s, package=%s",
                         current_service and current_service.name,
                         package and package.name)
            return False
            # L·∫•y t·∫•t c·∫£ tuy·∫øn ƒë∆∞·ªùng c√≥ th·ªÉ t·ª´ d·ªãch v·ª• hi·ªán t·∫°i
        routes = self.env[HIS_QUEUE_SERVICE_ROUTE].search([
            ('service_from_id', '=', current_service.id)
        ], order='sequence')

        _logger.info("T√¨m th·∫•y %d tuy·∫øn ƒë∆∞·ªùng cho d·ªãch v·ª• %s", len(routes), current_service.name)
        if not routes:
            _logger.info("Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng n√†o cho d·ªãch v·ª• %s", current_service.name)
            return False

        # Ghi log t·∫•t c·∫£ c√°c tuy·∫øn ƒë∆∞·ªùng t√¨m th·∫•y
        for route in routes:
            _logger.info("Tuy·∫øn ƒë∆∞·ªùng: %s -> %s, G√≥i: %s",
                         route.service_from_id.name,
                         route.service_to_id.name,
                         route.package_id and route.package_id.name or "Kh√¥ng c√≥")

        # T√¨m tuy·∫øn ƒë∆∞·ªùng c·ª• th·ªÉ cho g√≥i
        package_routes = routes.filtered(lambda r: r.package_id and r.package_id.id == package.id)
        if package_routes:
            _logger.info("T√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng theo g√≥i %s: %s -> %s",
                         package.name,
                         package_routes[0].service_from_id.name,
                         package_routes[0].service_to_id.name)
            return package_routes[0].service_to_id

        # T√¨m tuy·∫øn ƒë∆∞·ªùng kh√¥ng c√≥ g√≥i c·ª• th·ªÉ (chung cho t·∫•t c·∫£)
        general_routes = routes.filtered(lambda r: not r.package_id)
        if general_routes:
            _logger.info("T√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng chung: %s -> %s",
                         general_routes[0].service_from_id.name,
                         general_routes[0].service_to_id.name)
            return general_routes[0].service_to_id

        # N·∫øu kh√¥ng c√≥ tuy·∫øn ƒë∆∞·ªùng n√†o ph√π h·ª£p, tr·∫£ v·ªÅ tuy·∫øn ƒë·∫ßu ti√™n
        _logger.info("Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng ph√π h·ª£p, s·ª≠ d·ª•ng tuy·∫øn ƒë·∫ßu ti√™n: %s -> %s",
                     routes[0].service_from_id.name,
                     routes[0].service_to_id.name)
        return routes[0].service_to_id

    def _compute_color(self):
        """T√≠nh to√°n m√†u s·∫Øc cho giao di·ªán kanban d·ª±a tr√™n tr·∫°ng th√°i v√† m·ª©c ƒë·ªô ∆∞u ti√™n"""
        for token in self:
            if token.priority >= 5:
                token.color = 2  # M√†u cam
            elif token.priority >= 3:
                token.color = 3  # M√†u v√†ng
            elif token.state == 'waiting':
                token.color = 5  # M√†u xanh d∆∞∆°ng
            elif token.state == 'in_progress':
                token.color = 6  # M√†u t√≠m
            elif token.state == 'completed':
                token.color = 10  # M√†u xanh l√° c√¢y
            else:
                token.color = 0  # M√†u x√°m cho tr·∫°ng th√°i h·ªßy ho·∫∑c nh√°p

    def _notify_queue_change(self, room):
        """Th√¥ng b√°o cho m√†n h√¨nh ph√≤ng v·ªÅ s·ª± thay ƒë·ªïi h√†ng ƒë·ª£i"""
        self.env['bus.bus']._sendone(
            f'room_display_{room.id}',
            'queue_updated',
            {'room_id': room.id}
        )

    def action_start_service(self):
        """B·∫Øt ƒë·∫ßu ph·ª•c v·ª• token n√†y"""
        for token in self:
            if token.state != 'waiting':
                raise UserError(_("can_only_start_waiting_tokens"))

            token.write({
                'state': 'in_progress',
                'start_time': fields.Datetime.now(),
                'position': 0
            })

            # S·∫Øp x·∫øp l·∫°i h√†ng ƒë·ª£i v√¨ token n√†y ƒëang ƒë∆∞·ª£c ph·ª•c v·ª•
            waiting_tokens = self.search([
                ('room_id', '=', token.room_id.id),
                ('state', '=', 'waiting')
            ])

            # S·∫Øp x·∫øp theo ∆∞u ti√™n (gi·∫£m d·∫ßn) v√† ng√†y t·∫°o (tƒÉng d·∫ßn)
            sorted_tokens = waiting_tokens.sorted(key=lambda r: (-r.priority, r.create_date))

            # C·∫≠p nh·∫≠t v·ªã tr√≠ trong h√†ng ƒë·ª£i
            for index, t in enumerate(sorted_tokens, 1):
                t.position = index

            # Th√¥ng b√°o cho m√†n h√¨nh ph√≤ng v·ªÅ s·ª± thay ƒë·ªïi h√†ng ƒë·ª£i
            self._notify_queue_change(token.room_id)

            # Sau khi ·∫•n ti·∫øp nh·∫≠n => Tr·∫£ ra chi ti·∫øt h·ªì s∆° chuy√™n khoa
            return {
                'type': 'ir.actions.act_window',
                'name': 'Chi ti·∫øt h·ªì s∆° chuy√™n khoa',
                'res_model': 'his.queue.token',
                'res_id': token.id,
                'view_mode': 'form',
                'target': 'current',
            }

    def action_cancel(self):
        """Show cancellation reason popup instead of direct cancellation"""
        for token in self:
            if token.state in ['completed', 'cancelled']:
                raise UserError(_("cannot_cancel_completed_or_cancelled_token"))

            # Return action to open the cancellation wizard
            return {
                'type': 'ir.actions.act_window',
                'name': 'L√Ω do t·ª´ ch·ªëi',
                'res_model': 'his.queue.token.cancel.wizard',
                'view_mode': 'form',
                'target': 'new',
                'context': {'default_token_id': token.id},
            }

    def _predict_next_service(self, patient_id, current_service_id, package_id=False):
        """
        Ph∆∞∆°ng th·ª©c n√¢ng cao ƒë·ªÉ d·ª± ƒëo√°n d·ªãch v·ª• ti·∫øp theo cho b·ªánh nh√¢n
        S·ª≠ d·ª•ng k·∫øt h·ª£p quy t·∫Øc nghi·ªáp v·ª• v√† tuy·∫øn ƒë∆∞·ªùng ƒë∆∞·ª£c c·∫•u h√¨nh
        """
        # L·∫•y th√¥ng tin c·∫ßn thi·∫øt
        patient = self.env[HIS_PATIENT].browse(patient_id)
        current_service = self.env[PRODUCT_PRODUCT].browse(current_service_id)
        package = self._get_package(patient, package_id)

        # T√¨m c√°c tuy·∫øn ƒë∆∞·ªùng ph√π h·ª£p
        return self._find_appropriate_route(current_service, package, patient)

    def _get_package(self, patient, package_id):
        """L·∫•y g√≥i d·ªãch v·ª• c·ªßa b·ªánh nh√¢n"""
        if package_id:
            return self.env[HIS_HEALTH_CHECK_PACKAGE].browse(package_id)
        return patient.queue_package_id

    def _find_appropriate_route(self, current_service, package, patient):
        """T√¨m tuy·∫øn ƒë∆∞·ªùng ph√π h·ª£p t·ª´ d·ªãch v·ª• hi·ªán t·∫°i"""
        # T√¨m t·∫•t c·∫£ c√°c tuy·∫øn ƒë∆∞·ªùng c√≥ th·ªÉ t·ª´ d·ªãch v·ª• hi·ªán t·∫°i
        all_routes = self.env[HIS_QUEUE_SERVICE_ROUTE].search([
            ('service_from_id', '=', current_service.id)
        ], order='sequence')

        # N·∫øu kh√¥ng c√≥ tuy·∫øn ƒë∆∞·ªùng, tr·∫£ v·ªÅ False
        if not all_routes:
            return False

        # ∆Øu ti√™n tuy·∫øn ƒë∆∞·ªùng c·ª• th·ªÉ cho g√≥i d·ªãch v·ª• n·∫øu c√≥
        if package:
            package_routes = all_routes.filtered(lambda r: r.package_id.id == package.id)
            if package_routes:
                return package_routes[0].service_to_id

        # T√¨m tuy·∫øn ƒë∆∞·ªùng kh√¥ng c√≥ ƒëi·ªÅu ki·ªán ho·∫∑c c√≥ ƒëi·ªÅu ki·ªán ph√π h·ª£p
        return self._evaluate_route_conditions(all_routes, patient, current_service, package)

    def _evaluate_route_conditions(self, routes, patient, current_service, package):
        """ƒê√°nh gi√° c√°c ƒëi·ªÅu ki·ªán c·ªßa tuy·∫øn ƒë∆∞·ªùng"""
        for route in routes:
            if not route.condition or not route.condition.strip():
                # N·∫øu kh√¥ng c√≥ ƒëi·ªÅu ki·ªán, s·ª≠ d·ª•ng tuy·∫øn ƒë∆∞·ªùng m·∫∑c ƒë·ªãnh
                return route.service_to_id
            else:
                # ƒê√°nh gi√° ƒëi·ªÅu ki·ªán
                if self._check_route_condition(route, patient, current_service, package):
                    return route.service_to_id

        # M·∫∑c ƒë·ªãnh, tr·∫£ v·ªÅ tuy·∫øn ƒë∆∞·ªùng ƒë·∫ßu ti√™n
        return routes[0].service_to_id

    def _check_route_condition(self, route, patient, current_service, package):
        """Ki·ªÉm tra ƒëi·ªÅu ki·ªán c·ªßa tuy·∫øn ƒë∆∞·ªùng"""
        # Chu·∫©n b·ªã m√¥i tr∆∞·ªùng an to√†n ƒë·ªÉ ƒë√°nh gi√°
        local_dict = {
            'patient': patient,
            'current_service': current_service,
            'package': package,
        }
        try:
            return safe_eval(route.condition, local_dict=local_dict)
        except Exception as e:
            # Ghi log l·ªói nh∆∞ng kh√¥ng l√†m gi√°n ƒëo·∫°n lu·ªìng
            _logger.error(f"L·ªói khi ƒë√°nh gi√° ƒëi·ªÅu ki·ªán tuy·∫øn: {str(e)}")
            return False

    # Th√™m c√°c ph∆∞∆°ng th·ª©c n√†y v√†o class QueueToken
    def _send_notifications(self, notification_type):
        """
        G·ª≠i th√¥ng b√°o d·ª±a tr√™n lo·∫°i th√¥ng b√°o v√† c·∫•u h√¨nh h·ªá th·ªëng

        Tham s·ªë:
            notification_type (str): Lo·∫°i th√¥ng b√°o (new_token, token_called, room_change)
        """
        self.ensure_one()
        patient = self.patient_id

        # Ki·ªÉm tra c·∫•u h√¨nh th√¥ng b√°o
        ir_config = self.env['ir.config_parameter'].sudo()
        enable_sms = ir_config.get_param('his_smart_queue.enable_sms', 'False').lower() == 'true'
        enable_email = ir_config.get_param('his_smart_queue.enable_email', 'False').lower() == 'true'

        # G·ª≠i th√¥ng b√°o SMS n·∫øu ƒë∆∞·ª£c k√≠ch ho·∫°t v√† b·ªánh nh√¢n c√≥ s·ªë ƒëi·ªán tho·∫°i
        if enable_sms and patient.mobile:
            self._send_sms_notification(notification_type, ir_config)

        # G·ª≠i th√¥ng b√°o email n·∫øu ƒë∆∞·ª£c k√≠ch ho·∫°t v√† b·ªánh nh√¢n c√≥ email
        if enable_email and patient.email:
            self._send_email_notification(notification_type, ir_config)

    def _send_sms_notification(self, notification_type, ir_config):
        """G·ª≠i th√¥ng b√°o SMS d·ª±a tr√™n lo·∫°i th√¥ng b√°o"""
        try:
            template_id = self._get_sms_template_id(notification_type, ir_config)
            if template_id:
                self.env['sms.template'].browse(template_id).send_sms(self.id)
        except Exception as e:
            _logger.error("L·ªói khi g·ª≠i SMS: %s", str(e))

    def _send_email_notification(self, notification_type, ir_config):
        """G·ª≠i th√¥ng b√°o email d·ª±a tr√™n lo·∫°i th√¥ng b√°o"""
        try:
            template_id = self._get_email_template_id(notification_type, ir_config)
            if template_id:
                template = self.env['mail.template'].browse(template_id)
                template.send_mail(self.id, force_send=True)
        except Exception as e:
            _logger.error("L·ªói khi g·ª≠i email: %s", str(e))

    def _get_sms_template_id(self, notification_type, ir_config):
        """L·∫•y ID m·∫´u SMS d·ª±a tr√™n lo·∫°i th√¥ng b√°o"""
        if notification_type == 'new_token':
            return int(ir_config.get_param('his_smart_queue.sms_template_id', '0')) or \
                self.env.ref('his_smart_queue.sms_template_new_token').id
        elif notification_type == 'token_called':
            return self.env.ref('his_smart_queue.sms_template_token_called').id
        elif notification_type == 'room_change':
            return self.env.ref('his_smart_queue.sms_template_room_change').id
        return False

    def _get_email_template_id(self, notification_type, ir_config):
        """L·∫•y ID m·∫´u email d·ª±a tr√™n lo·∫°i th√¥ng b√°o"""
        if notification_type == 'new_token':
            return int(ir_config.get_param('his_smart_queue.email_template_id', '0')) or \
                self.env.ref('his_smart_queue.email_template_new_token').id
        elif notification_type == 'token_called':
            return self.env.ref('his_smart_queue.email_template_token_called').id
        elif notification_type == 'room_change':
            return self.env.ref('his_smart_queue.email_template_room_change').id
        return False

    @api.model
    def _run_load_balancing(self):
        """C√¥ng vi·ªác ƒë·ªãnh k·ª≥ c√¢n b·∫±ng t·∫£i gi·ªØa c√°c ph√≤ng"""
        # L·∫•y c·∫•u h√¨nh c√¢n b·∫±ng t·∫£i
        config = self._get_load_balancing_config()

        # T√¨m ph√≤ng m·ªü v√† ƒë√≥ng
        open_rooms, closed_rooms = self._get_rooms_by_state()

        # N·∫øu kh√¥ng c√≥ ph√≤ng m·ªü n√†o, kh√¥ng th·ª±c hi·ªán c√¢n b·∫±ng t·∫£i
        if not open_rooms:
            return

        # X·ª≠ l√Ω c√°c ph√≤ng ƒë√£ ƒë√≥ng
        self._process_closed_rooms(closed_rooms, open_rooms)

        # Ph√¢n lo·∫°i ph√≤ng th√†nh qu√° t·∫£i v√† nh√†n r·ªói
        overloaded_rooms, underloaded_rooms = self._classify_rooms_by_load(open_rooms, config['wait_threshold'])

        # X·ª≠ l√Ω c√°c ph√≤ng qu√° t·∫£i
        self._process_overloaded_rooms(overloaded_rooms, underloaded_rooms, config['max_patients_to_move'])

    def _get_load_balancing_config(self):
        """L·∫•y c·∫•u h√¨nh c√¢n b·∫±ng t·∫£i t·ª´ tham s·ªë h·ªá th·ªëng"""
        ir_config = self.env['ir.config_parameter'].sudo()
        return {
            'wait_threshold': float(ir_config.get_param('his_smart_queue.wait_threshold', '30.0')),
            'max_patients_to_move': int(ir_config.get_param('his_smart_queue.max_patients_to_move', '3'))
        }

    def _get_rooms_by_state(self):
        """Ph√¢n lo·∫°i ph√≤ng theo tr·∫°ng th√°i (m·ªü/ƒë√≥ng)"""
        open_rooms = self.env[HR_DEPARTMENT].search([('state', '=', 'open')])
        closed_rooms = self.env[HR_DEPARTMENT].search([('state', '!=', 'open')])
        return open_rooms, closed_rooms

    def _classify_rooms_by_load(self, open_rooms, wait_threshold):
        """Ph√¢n lo·∫°i ph√≤ng th√†nh qu√° t·∫£i v√† nh√†n r·ªói"""
        overloaded_rooms = []
        underloaded_rooms = []

        for room in open_rooms:
            if room.estimated_wait_time > wait_threshold:
                overloaded_rooms.append(room)
            elif room.queue_length <= 2:  # Ph√≤ng c√≥ √≠t h∆°n ho·∫∑c b·∫±ng 2 token ƒëang ch·ªù
                underloaded_rooms.append(room)

        return overloaded_rooms, underloaded_rooms

    def _process_closed_rooms(self, closed_rooms, open_rooms):
        """X·ª≠ l√Ω token trong c√°c ph√≤ng ƒë√£ ƒë√≥ng"""
        for closed_room in closed_rooms:
            # T√¨m c√°c token ƒëang ch·ªù trong ph√≤ng ƒë√£ ƒë√≥ng
            waiting_tokens = self.search([
                ('room_id', '=', closed_room.id),
                ('state', '=', 'waiting')
            ])

            if not waiting_tokens:
                continue

            # T√¨m ph√≤ng m·ªü c√πng d·ªãch v·ª•
            service_id = closed_room.service_id.id
            compatible_open_rooms = [r for r in open_rooms if r.service_id.id == service_id]

            if not compatible_open_rooms:
                continue

            # T√¨m ph√≤ng √≠t t·∫£i nh·∫•t
            target_room = min(compatible_open_rooms, key=lambda r: r.estimated_wait_time)

            # Di chuy·ªÉn token
            self._move_tokens_to_room(waiting_tokens, closed_room, target_room)

    def _process_overloaded_rooms(self, overloaded_rooms, underloaded_rooms, max_patients_to_move):
        """X·ª≠ l√Ω c√°c ph√≤ng qu√° t·∫£i"""
        for o_room in overloaded_rooms:
            service = o_room.service_id

            # T√¨m c√°c ph√≤ng √≠t t·∫£i t∆∞∆°ng th√≠ch
            compatible_rooms = [
                r for r in underloaded_rooms
                if r.service_id.id == service.id
            ]

            if not compatible_rooms:
                continue

            # L·∫•y c√°c token ƒë·ªÉ di chuy·ªÉn (t·ªëi ƒëa theo c·∫•u h√¨nh)
            tokens_to_move = self.search([
                ('room_id', '=', o_room.id),
                ('state', '=', 'waiting')
            ], order='position desc', limit=max_patients_to_move)

            if not tokens_to_move:
                continue

            # T√¨m ph√≤ng √≠t t·∫£i nh·∫•t
            target_room = min(compatible_rooms, key=lambda r: r.estimated_wait_time)

            # Di chuy·ªÉn token
            self._move_tokens_to_room(tokens_to_move, o_room, target_room)

    def _move_tokens_to_room(self, tokens, source_room, target_room):
        """Di chuy·ªÉn danh s√°ch token t·ª´ ph√≤ng ngu·ªìn sang ph√≤ng ƒë√≠ch"""
        for token in tokens:
            old_room = token.room_id
            token.room_id = target_room.id

            # Ghi log chuy·ªÉn ph√≤ng
            message = _("token_moved_from_room_to_room") % (old_room.name, target_room.name)
            token.message_post(
                body=message,
                subject=_("automatic_room_change_notification")
            )

            # G·ª≠i th√¥ng b√°o cho b·ªánh nh√¢n
            token._send_notifications('room_change')

        # S·∫Øp x·∫øp l·∫°i th·ª© t·ª± trong c√°c ph√≤ng
        self._reorder_room_queue(source_room)
        self._reorder_room_queue(target_room)

        # Th√¥ng b√°o cho m√†n h√¨nh hi·ªÉn th·ªã
        self._notify_queue_change(source_room)
        self._notify_queue_change(target_room)

    # Th√™m ph∆∞∆°ng th·ª©c h·ªó tr·ª£ s·∫Øp x·∫øp l·∫°i h√†ng ƒë·ª£i trong ph√≤ng
    def _reorder_room_queue(self, room):
        """S·∫Øp x·∫øp l·∫°i th·ª© t·ª± h√†ng ƒë·ª£i trong m·ªôt ph√≤ng"""
        waiting_tokens = self.search([
            ('room_id', '=', room.id),
            ('state', '=', 'waiting')
        ])

        # S·∫Øp x·∫øp theo m·ª©c ∆∞u ti√™n (gi·∫£m d·∫ßn) v√† th·ªùi gian t·∫°o (tƒÉng d·∫ßn)
        sorted_tokens = waiting_tokens.sorted(key=lambda r: (-r.priority, r.create_date))

        # C·∫≠p nh·∫≠t v·ªã tr√≠
        for index, token in enumerate(sorted_tokens):
            token.position = index + 1

    # Th√™m c√°c ph∆∞∆°ng th·ª©c m·ªõi v√†o queue_token.py ƒë·ªÉ x·ª≠ l√Ω nh√≥m d·ªãch v·ª•
    def _process_service_group_completion(self, token, service_group, patient, package):
        """X·ª≠ l√Ω ho√†n th√†nh d·ªãch v·ª• theo nh√≥m"""
        # Ki·ªÉm tra xem t·∫•t c·∫£ c√°c d·ªãch v·ª• trong nh√≥m ƒë√£ ho√†n th√†nh ch∆∞a
        group_completed = self._check_service_group_completion(service_group, patient)

        if group_completed:
            _logger.info("Nh√≥m d·ªãch v·ª• %s ƒë√£ ho√†n th√†nh. T√¨m nh√≥m ti·∫øp theo", service_group.name)
            # T√¨m nh√≥m d·ªãch v·ª• ti·∫øp theo
            next_group = self._get_next_service_group(service_group, package)

            if next_group:
                _logger.info("T√¨m th·∫•y nh√≥m d·ªãch v·ª• ti·∫øp theo: %s", next_group.name)
                # T·∫°o token cho t·∫•t c·∫£ d·ªãch v·ª• trong nh√≥m ti·∫øp theo
                self._create_tokens_for_service_group(next_group, patient, token)
            else:
                _logger.info("Kh√¥ng c√≥ nh√≥m d·ªãch v·ª• ti·∫øp theo cho b·ªánh nh√¢n %s", patient.name)
                # Th√¥ng b√°o ho√†n th√†nh
                return {
                    'type': IR_ACTIONS_CLIENT,
                    'tag': 'display_notification',
                    'params': {
                        'title': _(DONE_SERVICE),
                        'message': _('Completed all patient services %s') % patient.name,
                        'sticky': False,
                        'type': 'info',
                    }
                }

    def _check_service_group_completion(self, service_group, patient):
        """Ki·ªÉm tra xem nh√≥m d·ªãch v·ª• ƒë√£ ho√†n th√†nh ch∆∞a d·ª±a tr√™n ch√≠nh s√°ch ho√†n th√†nh"""
        if not service_group or not patient:
            return False

        # Ki·ªÉm tra b·∫£ng completed_service_ids ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
        if not hasattr(patient, 'completed_service_ids'):
            return False

        # L·∫•y c√°c d·ªãch v·ª• ƒë√£ ho√†n th√†nh
        completed_services = patient.completed_service_ids
        # L·∫•y t·∫•t c·∫£ d·ªãch v·ª• trong nh√≥m
        group_services = service_group.service_ids

        _logger.info(
            "Ki·ªÉm tra ho√†n th√†nh nh√≥m %s: D·ªãch v·ª• ho√†n th√†nh: %s, D·ªãch v·ª• trong nh√≥m: %s",
            service_group.name,
            ', '.join(completed_services.mapped('name')),
            ', '.join(group_services.mapped('name'))
        )

        # ƒê·∫øm s·ªë l∆∞·ª£ng d·ªãch v·ª• ƒë√£ ho√†n th√†nh trong nh√≥m
        completed_in_group = len(group_services & completed_services)
        total_in_group = len(group_services)

        _logger.info(
            "ƒê√£ ho√†n th√†nh %d/%d d·ªãch v·ª• trong nh√≥m %s",
            completed_in_group, total_in_group, service_group.name
        )

        # N·∫øu kh√¥ng c√≥ d·ªãch v·ª• trong nh√≥m
        if total_in_group == 0:
            return True

        # Ki·ªÉm tra theo ch√≠nh s√°ch ho√†n th√†nh
        if service_group.completion_policy == 'all':
            # Ph·∫£i ho√†n th√†nh t·∫•t c·∫£ d·ªãch v·ª•
            return completed_in_group == total_in_group
        elif service_group.completion_policy == 'any':
            # Ch·ªâ c·∫ßn ho√†n th√†nh b·∫•t k·ª≥ d·ªãch v·ª• n√†o
            return completed_in_group > 0

        # M·∫∑c ƒë·ªãnh l√† 'all'
        return completed_in_group == total_in_group

    def _get_next_service_group(self, current_group, package):
        """L·∫•y nh√≥m d·ªãch v·ª• ti·∫øp theo d·ª±a tr√™n nh√≥m hi·ªán t·∫°i v√† g√≥i d·ªãch v·ª•"""
        if not current_group:
            return False

        # T√¨m t·∫•t c·∫£ tuy·∫øn ƒë∆∞·ªùng t·ª´ nh√≥m hi·ªán t·∫°i
        routes = self.env[HIS_QUEUE_SERVICE_GROUP_ROUTE].search([
            ('group_from_id', '=', current_group.id)
        ], order='sequence')

        if not routes:
            _logger.info("Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng n√†o t·ª´ nh√≥m %s", current_group.name)
            return False

        # T√¨m tuy·∫øn ƒë∆∞·ªùng ph√π h·ª£p v·ªõi g√≥i
        if package:
            package_routes = routes.filtered(lambda r: r.package_id and r.package_id.id == package.id)
            if package_routes:
                return package_routes[0].group_to_id

        # T√¨m tuy·∫øn ƒë∆∞·ªùng kh√¥ng c√≥ g√≥i c·ª• th·ªÉ
        general_routes = routes.filtered(lambda r: not r.package_id)
        if general_routes:
            return general_routes[0].group_to_id

        # N·∫øu kh√¥ng c√≥ tuy·∫øn ƒë∆∞·ªùng n√†o ph√π h·ª£p, tr·∫£ v·ªÅ nh√≥m ƒë·∫ßu ti√™n
        return routes[0].group_to_id

    # Th√™m c√°c ph∆∞∆°ng th·ª©c m·ªõi
    def _compute_next_recommended_service(self):
        """T√≠nh to√°n d·ªãch v·ª• n√™n th·ª±c hi·ªán ti·∫øp theo"""
        for token in self:
            # N·∫øu l√† token song song v√† c√≤n token kh√°c ch∆∞a ho√†n th√†nh
            if token.is_parallel and token.parallel_token_ids:
                # L·∫•y c√°c token song song ·ªü tr·∫°ng th√°i draft
                draft_tokens = token.parallel_token_ids.filtered(lambda t: t.state == 'draft')

                if draft_tokens:
                    # T√¨m token t·ªëi ∆∞u nh·∫•t
                    optimal_token = self._calculate_optimal_service(draft_tokens.ids)
                    if optimal_token:
                        token.next_recommended_service_id = optimal_token.service_id
                        continue

            # N·∫øu kh√¥ng ph·∫£i tr∆∞·ªùng h·ª£p song song ho·∫∑c kh√¥ng t√¨m th·∫•y token t·ªëi ∆∞u
            token.next_recommended_service_id = False

    def _calculate_optimal_service(self, token_ids):
        """T√≠nh to√°n d·ªãch v·ª• t·ªëi ∆∞u nh·∫•t ƒë·ªÉ th·ª±c hi·ªán ti·∫øp theo"""
        tokens = self.browse(token_ids)

        if not tokens:
            return False

        # Tr·ªçng s·ªë cho c√°c ti√™u ch√≠
        WEIGHT_MOVEMENT = 0.4  # Tr·ªçng s·ªë cho th·ªùi gian di chuy·ªÉn
        WEIGHT_WAITING = 0.35  # Tr·ªçng s·ªë cho th·ªùi gian ch·ªù ƒë·ª£i t·∫°i ph√≤ng
        WEIGHT_DURATION = 0.15  # Tr·ªçng s·ªë cho th·ªùi gian th·ª±c hi·ªán d·ªãch v·ª•
        WEIGHT_MEDICAL = 0.1  # Tr·ªçng s·ªë cho ∆∞u ti√™n y t·∫ø

        best_token = False
        best_score = float('inf')  # ƒêi·ªÉm c√†ng th·∫•p c√†ng t·ªët

        # L·∫•y v·ªã tr√≠ hi·ªán t·∫°i (ph√≤ng hi·ªán t·∫°i)
        current_location = self.room_id if self.room_id else None

        for token in tokens:
            # 1. ƒêi·ªÉm di chuy·ªÉn (d·ª±a tr√™n kho·∫£ng c√°ch gi·ªØa c√°c ph√≤ng)
            movement_score = self._calculate_distance_score(current_location, token.room_id) if current_location else 5

            # 2. ƒêi·ªÉm th·ªùi gian ch·ªù
            waiting_tokens = self.search_count([
                ('room_id', '=', token.room_id.id),
                ('state', '=', 'waiting')
            ])
            capacity = token.room_id.capacity if token.room_id.capacity > 0 else 1
            waiting_score = waiting_tokens / capacity * 10  # Chu·∫©n h√≥a 0-10

            # 3. ƒêi·ªÉm th·ªùi gian th·ª±c hi·ªán
            duration_score = token.service_id.average_duration / 10  # Chu·∫©n h√≥a, gi·∫£ s·ª≠ max 100 ph√∫t

            # 4. ƒêi·ªÉm ∆∞u ti√™n y t·∫ø (c√†ng th·∫•p c√†ng ∆∞u ti√™n)
            medical_priority = {
                'BLOOD': 1,  # X√©t nghi·ªám m√°u ∆∞u ti√™n cao nh·∫•t
                'XRAY': 3,
                'ULTRA': 4,
                'DOC': 2,
                'VITAL': 5,
                'REG': 10
            }
            med_score = medical_priority.get(token.service_id.code, 5)

            # T√≠nh t·ªïng ƒëi·ªÉm (ƒëi·ªÉm th·∫•p h∆°n = ∆∞u ti√™n cao h∆°n)
            total_score = (
                WEIGHT_MOVEMENT * movement_score + WEIGHT_WAITING * waiting_score + WEIGHT_DURATION * duration_score + WEIGHT_MEDICAL * med_score)

            _logger.info(
                "Token %s - Di chuy·ªÉn: %.2f, Ch·ªù: %.2f, Th·ªùi gian: %.2f, Y t·∫ø: %.2f, T·ªïng: %.2f",
                token.name, movement_score, waiting_score, duration_score, med_score, total_score
            )

            if total_score < best_score:
                best_score = total_score
                best_token = token

        return best_token

    def _calculate_distance_score(self, from_room, to_room):
        """T√≠nh ƒëi·ªÉm kho·∫£ng c√°ch gi·ªØa c√°c ph√≤ng"""
        if not from_room or not to_room:
            return 5  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

        if from_room.id == to_room.id:
            return 0  # C√πng ph√≤ng

        # Ma tr·∫≠n kho·∫£ng c√°ch th·ª±c t·∫ø gi·ªØa c√°c ph√≤ng
        distance_matrix = {
            # Format: ('from_code', 'to_code'): distance_value
            ('REG01', 'BLOOD01'): 2,
            ('REG01', 'XRAY01'): 4,
            ('REG01', 'UTR01'): 4,
            ('REG01', 'DOC01'): 3,
            ('REG01', 'DOC02'): 3,
            ('BLOOD01', 'XRAY01'): 3,
            ('BLOOD01', 'UTR01'): 2,
            ('BLOOD01', 'DOC01'): 4,
            ('BLOOD01', 'DOC02'): 4,
            ('XRAY01', 'UTR01'): 1,
            ('XRAY01', 'DOC01'): 3,
            ('XRAY01', 'DOC02'): 3,
            ('UTR01', 'DOC01'): 3,
            ('UTR01', 'DOC02'): 3,
            ('DOC01', 'DOC02'): 1,
            ('DOC01', 'PHARM01'): 2,
            ('DOC02', 'PHARM01'): 2,
        }

        # T√¨m kho·∫£ng c√°ch trong ma tr·∫≠n
        key = (from_room.code, to_room.code)
        reverse_key = (to_room.code, from_room.code)

        if key in distance_matrix:
            return distance_matrix[key]
        elif reverse_key in distance_matrix:
            return distance_matrix[reverse_key]
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y tr·ª±c ti·∫øp, t√¨m ƒë∆∞·ªùng ƒëi gi√°n ti·∫øp (c√≥ th·ªÉ tri·ªÉn khai thu·∫≠t to√°n ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t)
            return 5  # M·∫∑c ƒë·ªãnh

    def _create_tokens_for_service_group(self, service_group, patient, origin_token, state='draft'):
        """T·∫°o token cho t·∫•t c·∫£ d·ªãch v·ª• trong nh√≥m"""
        if not service_group or not patient:
            return self.env[HIS_QUEUE_TOKEN]

        # C·∫≠p nh·∫≠t nh√≥m d·ªãch v·ª• hi·ªán t·∫°i cho b·ªánh nh√¢n
        patient.write({
            'current_service_group_id': service_group.id
        })

        # Chu·∫©n b·ªã c√°c tham s·ªë chung cho token
        token_params = self._prepare_group_token_params(patient, service_group, origin_token, state)

        # T·∫°o token cho t·ª´ng d·ªãch v·ª• trong nh√≥m
        created_tokens = self.env[HIS_QUEUE_TOKEN]
        for service in service_group.service_ids:
            _logger.info("T·∫°o token cho d·ªãch v·ª• %s trong nh√≥m %s", service.name, service_group.name)

            # T·∫°o token m·ªõi v·ªõi c√°c tham s·ªë ƒë√£ chu·∫©n b·ªã
            token_vals = dict(token_params, service_id=service.id)
            new_token = self.create(token_vals)
            created_tokens += new_token
            _logger.info("ƒê√£ t·∫°o token %s cho d·ªãch v·ª• %s thu·ªôc nh√≥m %s",
                         new_token.name, service.name, service_group.name)

        # Li√™n k·∫øt c√°c token song song n·∫øu c√≥ nhi·ªÅu h∆°n 1 token
        if len(created_tokens) > 1:
            self._link_parallel_tokens(created_tokens)

        return created_tokens

    def _prepare_group_token_params(self, patient, service_group, origin_token, state):
        """Chu·∫©n b·ªã c√°c tham s·ªë chung cho token trong nh√≥m d·ªãch v·ª•"""

        return {
            'patient_id': patient.id,
            'service_group_id': service_group.id,
            'priority': origin_token.priority if origin_token else 0,
            'notes': _("T·ª± ƒë·ªông t·∫°o t·ª´ nh√≥m d·ªãch v·ª• %s") % service_group.name,
            'origin_token_id': origin_token.id if origin_token else False,
            'is_parallel': True,
            'state': state,
        }

    def _link_parallel_tokens(self, tokens):
        """Li√™n k·∫øt c√°c token song song v·ªõi nhau"""
        _logger.info("Li√™n k·∫øt %s token song song v·ªõi nhau", len(tokens))
        for token in tokens:
            other_tokens = tokens - token
            token.write({
                'parallel_token_ids': [(6, 0, other_tokens.ids)],
            })

    def action_complete_service(self):
        """Ho√†n t·∫•t vi·ªác ph·ª•c v·ª• token n√†y"""
        for token in self:
            if token.state != 'in_progress':
                raise UserError(_("can_only_complete_in_progress_tokens"))

            # L·∫•y th√¥ng tin c∆° b·∫£n
            context = self._prepare_completion_context(token)

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i token v√† th·ªùi gian
            self._update_token_completion_status(token)

            # C·∫≠p nh·∫≠t th·ªùi gian ph·ª•c v·ª• trung b√¨nh c·ªßa d·ªãch v·ª•
            self._update_service_stats(context)

            # C·∫≠p nh·∫≠t d·ªãch v·ª• ƒë√£ ho√†n th√†nh cho b·ªánh nh√¢n
            self._update_patient_completed_services(context)

            # X·ª≠ l√Ω ti·∫øp theo d·ª±a tr√™n lo·∫°i token
            result = self._process_token_completion(token, context)

            # Th√¥ng b√°o cho m√†n h√¨nh ph√≤ng v·ªÅ s·ª± thay ƒë·ªïi h√†ng ƒë·ª£i
            self._notify_queue_change(token.room_id)

            return result if result else {'type': 'ir.actions.act_window_close'}

    def _prepare_completion_context(self, token):
        """Chu·∫©n b·ªã ng·ªØ c·∫£nh cho vi·ªác ho√†n th√†nh token"""
        return {
            'token': token,
            'current_service': token.service_id,
            'patient': token.patient_id,
            'package': token.patient_id.queue_package_id,
        }

    def _update_token_completion_status(self, token):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh cho token"""
        token.write({
            'state': 'completed',
            'end_time': fields.Datetime.now()
        })

    def _update_service_stats(self, context):
        """C·∫≠p nh·∫≠t th·ªëng k√™ d·ªãch v·ª•"""
        token = context['token']
        current_service = context['current_service']

        if token.actual_duration > 0:
            current_service._update_average_duration(token.actual_duration)

    def _update_patient_completed_services(self, context):
        """C·∫≠p nh·∫≠t d·ªãch v·ª• ƒë√£ ho√†n th√†nh cho b·ªánh nh√¢n"""
        patient = context['patient']
        current_service = context['current_service']

        if patient and current_service and 'completed_service_ids' in patient._fields:
            patient.write({
                'completed_service_ids': [(4, current_service.id)]
            })

    def _process_token_completion(self, token, context):
        """X·ª≠ l√Ω logic ti·∫øp theo sau khi ho√†n th√†nh token"""
        # X·ª≠ l√Ω d·ª±a tr√™n lo·∫°i token
        return self._handle_parallel_token_completion(token, context['patient'])
        # if token.is_parallel and token.service_group_id:

    def _create_next_group_service_token(self, next_service, patient, token, current_group):
        """T·∫°o token cho d·ªãch v·ª• ti·∫øp theo trong c√πng nh√≥m"""
        new_token = self.create({
            'patient_id': patient.id,
            'service_id': next_service.id,
            'service_group_id': current_group.id,
            'priority': token.priority,
            'notes': _("auto_created_to_complete_service_group") % current_group.name,
            'origin_token_id': token.id,
            'state': 'waiting',
        })

        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _("next_service"),
                'message': _("instruct_patient_to_room") % (new_token.room_id.name, new_token.service_id.name),
                'sticky': True,
                'type': 'info',
            }
        }

    # C·∫≠p nh·∫≠t h√†m x·ª≠ l√Ω ho√†n th√†nh token song song
    def _handle_parallel_token_completion(self, token, patient):
        """X·ª≠ l√Ω khi ho√†n th√†nh m·ªôt token trong nh√≥m song song"""
        # T√¨m c√°c token song song kh√°c ch∆∞a ho√†n th√†nh
        other_tokens = token.parallel_token_ids.filtered(lambda t: t.state == 'draft')

        if not other_tokens:
            # Ki·ªÉm tra xem t·∫•t c·∫£ token ƒë√£ ho√†n th√†nh ch∆∞a
            all_completed = all(t.state == 'completed' for t in token.parallel_token_ids)

            if all_completed:
                # ƒê√£ ho√†n th√†nh t·∫•t c·∫£ token song song, t·∫°o token cho b∆∞·ªõc ti·∫øp theo
                _logger.info("T·∫•t c·∫£ token song song ƒë√£ ho√†n th√†nh, chuy·ªÉn sang b∆∞·ªõc ti·∫øp theo")
                return self._create_next_service_token(token, patient)

            # C√≥ th·ªÉ c√≤n token ƒëang th·ª±c hi·ªán, kh√¥ng l√†m g√¨
            return None

        # C√≥ token ch∆∞a ho√†n th√†nh, t√¨m token t·ªëi ∆∞u ti·∫øp theo
        next_token = self._calculate_optimal_service(other_tokens.ids)

        if next_token:
            # K√≠ch ho·∫°t token ti·∫øp theo
            next_token.write({
                'state': 'waiting',
                'priority': next_token.priority + 1  # TƒÉng ∆∞u ti√™n
            })

            # Th√¥ng b√°o h∆∞·ªõng d·∫´n
            return {
                'type': IR_ACTIONS_CLIENT,
                'tag': 'display_notification',
                'params': {
                    'title': _(NEXT_SERVICE),
                    'message': _(TEXT_INSTRUCT) % (next_token.room_id.name, next_token.service_id.name),
                    'sticky': True,
                    'type': 'info',
                }
            }

        return None

    # Trong _handle_registration_completion, c·∫ßn s·ª≠a ƒë·ªïi ƒë·ªÉ ƒë·∫∑t m·ªôt token l√† active v√† c√°c token kh√°c l√† pending
    def _handle_registration_completion(self, token, patient):
        """X·ª≠ l√Ω khi ho√†n th√†nh ƒëƒÉng k√Ω cho b·ªánh nh√¢n"""
        # T√¨m nh√≥m d·ªãch v·ª• song song
        parallel_group = self.env[HIS_HEALTH_CHECK_GROUP].search([
            ('code', '=', 'PARALLEL_TESTS')
        ], limit=1)

        if not parallel_group:
            _logger.warning("Kh√¥ng t√¨m th·∫•y nh√≥m d·ªãch v·ª• song song v·ªõi m√£ PARALLEL_TESTS")
            return None

        _logger.info("T√¨m th·∫•y nh√≥m d·ªãch v·ª• song song: %s", parallel_group.name)

        # T·∫°o c√°c token ·ªü tr·∫°ng th√°i draft thay v√¨ waiting
        created_tokens = self._create_tokens_for_service_group(parallel_group, patient, token, state='draft')

        if not created_tokens:
            _logger.warning("Kh√¥ng th·ªÉ t·∫°o token song song")
            return None

        # T√≠nh to√°n token t·ªëi ∆∞u
        optimal_token = self._calculate_optimal_service(created_tokens.ids)

        if not optimal_token:
            # N·∫øu kh√¥ng t√¨m th·∫•y token t·ªëi ∆∞u, l·∫•y token ƒë·∫ßu ti√™n
            optimal_token = created_tokens[0]

        # K√≠ch ho·∫°t ch·ªâ token t·ªëi ∆∞u, c√°c token kh√°c gi·ªØ ·ªü tr·∫°ng th√°i draft
        for t in created_tokens:
            if t.id == optimal_token.id:
                t.write({
                    'state': 'waiting',
                    'priority': t.priority + 2  # TƒÉng priority ƒë·ªÉ ƒë·∫£m b·∫£o token n√†y ƒë∆∞·ª£c ∆∞u ti√™n
                })
            else:
                t.write({
                    'state': 'draft',  # Gi·ªØ c√°c token kh√°c ·ªü tr·∫°ng th√°i draft
                    'notes': t.notes + _("wait_after_completing_test") % optimal_token.service_id.name
                })

        # Th√¥ng b√°o h∆∞·ªõng d·∫´n
        return {
            'type': IR_ACTIONS_CLIENT,
            'tag': 'display_notification',
            'params': {
                'title': _('next_recommended_service'),
                'message': _(TEXT_INSTRUCT) % (optimal_token.room_id.name, optimal_token.service_id.name),
                'sticky': True,
                'type': 'info',
            }
        }

    def _create_next_service_token(self, completed_token, patient):
        """T·∫°o token cho d·ªãch v·ª• ti·∫øp theo sau khi ho√†n th√†nh nh√≥m d·ªãch v·ª• song song"""
        # T√¨m nh√≥m d·ªãch v·ª• ti·∫øp theo
        service_group = completed_token.service_group_id
        if not service_group:
            return None

        # T√¨m tuy·∫øn ƒë∆∞·ªùng t·ª´ nh√≥m hi·ªán t·∫°i ƒë·∫øn nh√≥m ti·∫øp theo
        next_group = self._get_next_service_group(service_group, patient.queue_package_id)

        if not next_group:
            _logger.info("Kh√¥ng t√¨m th·∫•y nh√≥m d·ªãch v·ª• ti·∫øp theo")
            return {
                'type': IR_ACTIONS_CLIENT,
                'tag': 'display_notification',
                'params': {
                    'title': _('completed'),
                    'message': _('Completed all patient services %s') % patient.name,
                    'sticky': False,
                    'type': 'info',
                }
            }

        # T·∫°o token cho nh√≥m ti·∫øp theo
        _logger.info("T·∫°o token cho nh√≥m d·ªãch v·ª• ti·∫øp theo: %s", next_group.name)
        # Ki·ªÉm tra xem nh√≥m ti·∫øp theo c√≥ ph·∫£i l√† nh√≥m song song kh√¥ng
        if len(next_group.service_ids) > 1:
            # T·∫°o token song song cho nh√≥m ti·∫øp theo
            new_tokens = self._create_tokens_for_service_group(next_group, patient, completed_token, state='draft')

            if new_tokens:
                # T√¨m token t·ªëi ∆∞u ƒë·ªÉ th·ª±c hi·ªán ƒë·∫ßu ti√™n
                optimal_token = self._calculate_optimal_service(new_tokens.ids)

                if optimal_token:
                    # K√≠ch ho·∫°t token ƒë·∫ßu ti√™n
                    optimal_token.write({'state': 'waiting'})

                    return {
                        'type': IR_ACTIONS_CLIENT,
                        'tag': 'display_notification',
                        'params': {
                            'title': _(NEXT_SERVICE),
                            'message': _(TEXT_INSTRUCT) % (optimal_token.room_id.name, optimal_token.service_id.name),
                            'sticky': True,
                            'type': 'info',
                        }
                    }
        else:
            # T·∫°o token ƒë∆°n cho d·ªãch v·ª• ƒë·∫ßu ti√™n trong nh√≥m
            service = next_group.service_ids[0]

            new_token = self.create({
                'patient_id': patient.id,
                'service_id': service.id,
                'service_group_id': next_group.id,
                'priority': completed_token.priority,
                'notes': _("T·ª± ƒë·ªông t·∫°o sau khi ho√†n th√†nh nh√≥m d·ªãch v·ª• %s") % service_group.name,
                'origin_token_id': completed_token.id,
                'state': 'waiting',
            })

            return {
                'type': IR_ACTIONS_CLIENT,
                'tag': 'display_notification',
                'params': {
                    'title': _(NEXT_SERVICE),
                    'message': _(TEXT_INSTRUCT) % (new_token.room_id.name, new_token.service_id.name),
                    'sticky': True,
                    'type': 'info',
                }
            }

        return None

    def _compute_wait_time(self):
        """T√≠nh to√°n th·ªùi gian ch·ªù ∆∞·ªõc t√≠nh d·ª±a tr√™n nhi·ªÅu y·∫øu t·ªë"""
        for token in self:
            if token.state != 'waiting':
                token.estimated_wait_time = 0
                continue

            room = token.room_id
            if not room:
                token.estimated_wait_time = 0
                continue

            # L·∫•y t·∫•t c·∫£ token ƒëang ch·ªù c·ªßa ph√≤ng n√†y
            waiting_tokens = self.search([
                ('room_id', '=', room.id),
                ('state', '=', 'waiting'),
                ('position', '<', token.position)
            ])

            # T√≠nh to√°n th·ªùi gian c∆° b·∫£n
            avg_duration = token.service_id.average_duration
            base_wait_time = len(waiting_tokens) * avg_duration / room.capacity
            token.estimated_wait_time = base_wait_time

    def _get_next_service_in_group(self, service_group, current_service):
        """L·∫•y d·ªãch v·ª• ti·∫øp theo trong c√πng nh√≥m d·ªãch v·ª•"""
        if not service_group or not current_service:
            return False

        all_services = service_group.service_ids
        # S·∫Øp x·∫øp d·ªãch v·ª• theo sequence
        sorted_services = all_services.sorted(key=lambda r: r.sequence)

        # T√¨m v·ªã tr√≠ c·ªßa d·ªãch v·ª• hi·ªán t·∫°i
        current_index = -1
        for i, service in enumerate(sorted_services):
            if service.id == current_service.id:
                current_index = i
                break

        # Ki·ªÉm tra n·∫øu c√≥ d·ªãch v·ª• ti·∫øp theo
        if current_index >= 0 and current_index < len(sorted_services) - 1:
            return sorted_services[current_index + 1]

        return False
